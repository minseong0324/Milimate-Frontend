/// <reference types="react" />
/// <reference types="react" />
export declare const s: {
    Button: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLButtonElement> | undefined;
        key?: import("react").Key | null | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        name?: string | undefined;
        type?: "button" | "submit" | "reset" | undefined;
        value?: string | number | readonly string[] | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLButtonElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLButtonElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLButtonElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLButtonElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLButtonElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLButtonElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLButtonElement> | undefined;
    }>;
    CenteredWrapper: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLDivElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
    }>;
    H2: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLHeadingElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLHeadingElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLHeadingElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLHeadingElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLHeadingElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLHeadingElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLHeadingElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLHeadingElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLHeadingElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLHeadingElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLHeadingElement> | undefined;
    }>;
    H1: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLHeadingElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLHeadingElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLHeadingElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLHeadingElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLHeadingElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLHeadingElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLHeadingElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLHeadingElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLHeadingElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLHeadingElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLHeadingElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLHeadingElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLHeadingElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLHeadingElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLHeadingElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLHeadingElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLHeadingElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLHeadingElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLHeadingElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLHeadingElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLHeadingElement> | undefined;
    }>;
    P: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLParagraphElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLParagraphElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLParagraphElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLParagraphElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLParagraphElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLParagraphElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLParagraphElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLParagraphElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLParagraphElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLParagraphElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLParagraphElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLParagraphElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLParagraphElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLParagraphElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLParagraphElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLParagraphElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLParagraphElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLParagraphElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLParagraphElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLParagraphElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLParagraphElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLParagraphElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLParagraphElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLParagraphElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLParagraphElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLParagraphElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLParagraphElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLParagraphElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLParagraphElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLParagraphElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLParagraphElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLParagraphElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLParagraphElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLParagraphElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLParagraphElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLParagraphElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLParagraphElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLParagraphElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLParagraphElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLParagraphElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLParagraphElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLParagraphElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLParagraphElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLParagraphElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLParagraphElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLParagraphElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLParagraphElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLParagraphElement> | undefined;
    }>;
    Form: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLFormElement> | undefined;
        key?: import("react").Key | null | undefined;
        acceptCharset?: string | undefined;
        action?: string | undefined;
        autoComplete?: string | undefined;
        encType?: string | undefined;
        method?: string | undefined;
        name?: string | undefined;
        noValidate?: boolean | undefined;
        target?: string | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLFormElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLFormElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLFormElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLFormElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLFormElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLFormElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLFormElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLFormElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLFormElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLFormElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLFormElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLFormElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLFormElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLFormElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLFormElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLFormElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLFormElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLFormElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLFormElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLFormElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLFormElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLFormElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLFormElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLFormElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLFormElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLFormElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLFormElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLFormElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLFormElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLFormElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLFormElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLFormElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLFormElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLFormElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLFormElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLFormElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLFormElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLFormElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLFormElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLFormElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLFormElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLFormElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLFormElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLFormElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLFormElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLFormElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLFormElement> | undefined;
    }>;
    TreeImg: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLImageElement> | undefined;
        key?: import("react").Key | null | undefined;
        alt?: string | undefined;
        crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
        decoding?: "async" | "auto" | "sync" | undefined;
        height?: string | number | undefined;
        loading?: "eager" | "lazy" | undefined;
        referrerPolicy?: import("react").HTMLAttributeReferrerPolicy | undefined;
        sizes?: string | undefined;
        src?: string | undefined;
        srcSet?: string | undefined;
        useMap?: string | undefined;
        width?: string | number | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLImageElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLImageElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLImageElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLImageElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLImageElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLImageElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLImageElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLImageElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLImageElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLImageElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLImageElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLImageElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLImageElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLImageElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLImageElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLImageElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLImageElement> | undefined;
    }>;
    Break: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLBRElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLBRElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLBRElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLBRElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLBRElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLBRElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLBRElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLBRElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLBRElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLBRElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLBRElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLBRElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLBRElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLBRElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLBRElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLBRElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLBRElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLBRElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLBRElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLBRElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLBRElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLBRElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLBRElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLBRElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLBRElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLBRElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLBRElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLBRElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLBRElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLBRElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLBRElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLBRElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLBRElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLBRElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLBRElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLBRElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLBRElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLBRElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLBRElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLBRElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLBRElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLBRElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLBRElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLBRElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLBRElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLBRElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLBRElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLBRElement> | undefined;
    }>;
    ButtonWrapper: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLDivElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
    }>;
    BackgroundContainer: import("styled-components").IStyledComponent<"web", {
        ref?: import("react").LegacyRef<HTMLDivElement> | undefined;
        key?: import("react").Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: import("react").CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
    }>;
    Title: import("styled-components").IStyledComponent<"web", {
        suppressHydrationWarning?: boolean | undefined;
        className?: string | undefined;
        color?: string | undefined;
        height?: string | number | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        max?: string | number | undefined;
        media?: string | undefined;
        method?: string | undefined;
        min?: string | number | undefined;
        name?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        target?: string | undefined;
        type?: string | undefined;
        width?: string | number | undefined;
        role?: import("react").AriaRole | undefined;
        tabIndex?: number | undefined;
        crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
        accentHeight?: string | number | undefined;
        accumulate?: "none" | "sum" | undefined;
        additive?: "replace" | "sum" | undefined;
        alignmentBaseline?: "inherit" | "alphabetic" | "hanging" | "ideographic" | "mathematical" | "auto" | "baseline" | "before-edge" | "text-before-edge" | "middle" | "central" | "after-edge" | "text-after-edge" | undefined;
        allowReorder?: "yes" | "no" | undefined;
        alphabetic?: string | number | undefined;
        amplitude?: string | number | undefined;
        arabicForm?: "initial" | "medial" | "terminal" | "isolated" | undefined;
        ascent?: string | number | undefined;
        attributeName?: string | undefined;
        attributeType?: string | undefined;
        autoReverse?: (boolean | "true" | "false") | undefined;
        azimuth?: string | number | undefined;
        baseFrequency?: string | number | undefined;
        baselineShift?: string | number | undefined;
        baseProfile?: string | number | undefined;
        bbox?: string | number | undefined;
        begin?: string | number | undefined;
        bias?: string | number | undefined;
        by?: string | number | undefined;
        calcMode?: string | number | undefined;
        capHeight?: string | number | undefined;
        clip?: string | number | undefined;
        clipPath?: string | undefined;
        clipPathUnits?: string | number | undefined;
        clipRule?: string | number | undefined;
        colorInterpolation?: string | number | undefined;
        colorInterpolationFilters?: "inherit" | "auto" | "sRGB" | "linearRGB" | undefined;
        colorProfile?: string | number | undefined;
        colorRendering?: string | number | undefined;
        contentScriptType?: string | number | undefined;
        contentStyleType?: string | number | undefined;
        cursor?: string | number | undefined;
        cx?: string | number | undefined;
        cy?: string | number | undefined;
        d?: string | undefined;
        decelerate?: string | number | undefined;
        descent?: string | number | undefined;
        diffuseConstant?: string | number | undefined;
        direction?: string | number | undefined;
        display?: string | number | undefined;
        divisor?: string | number | undefined;
        dominantBaseline?: string | number | undefined;
        dur?: string | number | undefined;
        dx?: string | number | undefined;
        dy?: string | number | undefined;
        edgeMode?: string | number | undefined;
        elevation?: string | number | undefined;
        enableBackground?: string | number | undefined;
        end?: string | number | undefined;
        exponent?: string | number | undefined;
        externalResourcesRequired?: (boolean | "true" | "false") | undefined;
        fill?: string | undefined;
        fillOpacity?: string | number | undefined;
        fillRule?: "inherit" | "nonzero" | "evenodd" | undefined;
        filter?: string | undefined;
        filterRes?: string | number | undefined;
        filterUnits?: string | number | undefined;
        floodColor?: string | number | undefined;
        floodOpacity?: string | number | undefined;
        focusable?: "auto" | (boolean | "true" | "false") | undefined;
        fontFamily?: string | undefined;
        fontSize?: string | number | undefined;
        fontSizeAdjust?: string | number | undefined;
        fontStretch?: string | number | undefined;
        fontStyle?: string | number | undefined;
        fontVariant?: string | number | undefined;
        fontWeight?: string | number | undefined;
        format?: string | number | undefined;
        fr?: string | number | undefined;
        from?: string | number | undefined;
        fx?: string | number | undefined;
        fy?: string | number | undefined;
        g1?: string | number | undefined;
        g2?: string | number | undefined;
        glyphName?: string | number | undefined;
        glyphOrientationHorizontal?: string | number | undefined;
        glyphOrientationVertical?: string | number | undefined;
        glyphRef?: string | number | undefined;
        gradientTransform?: string | undefined;
        gradientUnits?: string | undefined;
        hanging?: string | number | undefined;
        horizAdvX?: string | number | undefined;
        horizOriginX?: string | number | undefined;
        href?: string | undefined;
        ideographic?: string | number | undefined;
        imageRendering?: string | number | undefined;
        in2?: string | number | undefined;
        in?: string | undefined;
        intercept?: string | number | undefined;
        k1?: string | number | undefined;
        k2?: string | number | undefined;
        k3?: string | number | undefined;
        k4?: string | number | undefined;
        k?: string | number | undefined;
        kernelMatrix?: string | number | undefined;
        kernelUnitLength?: string | number | undefined;
        kerning?: string | number | undefined;
        keyPoints?: string | number | undefined;
        keySplines?: string | number | undefined;
        keyTimes?: string | number | undefined;
        lengthAdjust?: string | number | undefined;
        letterSpacing?: string | number | undefined;
        lightingColor?: string | number | undefined;
        limitingConeAngle?: string | number | undefined;
        local?: string | number | undefined;
        markerEnd?: string | undefined;
        markerHeight?: string | number | undefined;
        markerMid?: string | undefined;
        markerStart?: string | undefined;
        markerUnits?: string | number | undefined;
        markerWidth?: string | number | undefined;
        mask?: string | undefined;
        maskContentUnits?: string | number | undefined;
        maskUnits?: string | number | undefined;
        mathematical?: string | number | undefined;
        mode?: string | number | undefined;
        numOctaves?: string | number | undefined;
        offset?: string | number | undefined;
        opacity?: string | number | undefined;
        operator?: string | number | undefined;
        order?: string | number | undefined;
        orient?: string | number | undefined;
        orientation?: string | number | undefined;
        origin?: string | number | undefined;
        overflow?: string | number | undefined;
        overlinePosition?: string | number | undefined;
        overlineThickness?: string | number | undefined;
        paintOrder?: string | number | undefined;
        panose1?: string | number | undefined;
        path?: string | undefined;
        pathLength?: string | number | undefined;
        patternContentUnits?: string | undefined;
        patternTransform?: string | number | undefined;
        patternUnits?: string | undefined;
        pointerEvents?: string | number | undefined;
        points?: string | undefined;
        pointsAtX?: string | number | undefined;
        pointsAtY?: string | number | undefined;
        pointsAtZ?: string | number | undefined;
        preserveAlpha?: (boolean | "true" | "false") | undefined;
        preserveAspectRatio?: string | undefined;
        primitiveUnits?: string | number | undefined;
        r?: string | number | undefined;
        radius?: string | number | undefined;
        refX?: string | number | undefined;
        refY?: string | number | undefined;
        renderingIntent?: string | number | undefined;
        repeatCount?: string | number | undefined;
        repeatDur?: string | number | undefined;
        requiredExtensions?: string | number | undefined;
        requiredFeatures?: string | number | undefined;
        restart?: string | number | undefined;
        result?: string | undefined;
        rotate?: string | number | undefined;
        rx?: string | number | undefined;
        ry?: string | number | undefined;
        scale?: string | number | undefined;
        seed?: string | number | undefined;
        shapeRendering?: string | number | undefined;
        slope?: string | number | undefined;
        spacing?: string | number | undefined;
        specularConstant?: string | number | undefined;
        specularExponent?: string | number | undefined;
        speed?: string | number | undefined;
        spreadMethod?: string | undefined;
        startOffset?: string | number | undefined;
        stdDeviation?: string | number | undefined;
        stemh?: string | number | undefined;
        stemv?: string | number | undefined;
        stitchTiles?: string | number | undefined;
        stopColor?: string | undefined;
        stopOpacity?: string | number | undefined;
        strikethroughPosition?: string | number | undefined;
        strikethroughThickness?: string | number | undefined;
        string?: string | number | undefined;
        stroke?: string | undefined;
        strokeDasharray?: string | number | undefined;
        strokeDashoffset?: string | number | undefined;
        strokeLinecap?: "inherit" | "butt" | "round" | "square" | undefined;
        strokeLinejoin?: "inherit" | "round" | "miter" | "bevel" | undefined;
        strokeMiterlimit?: string | number | undefined;
        strokeOpacity?: string | number | undefined;
        strokeWidth?: string | number | undefined;
        surfaceScale?: string | number | undefined;
        systemLanguage?: string | number | undefined;
        tableValues?: string | number | undefined;
        targetX?: string | number | undefined;
        targetY?: string | number | undefined;
        textAnchor?: string | undefined;
        textDecoration?: string | number | undefined;
        textLength?: string | number | undefined;
        textRendering?: string | number | undefined;
        to?: string | number | undefined;
        transform?: string | undefined;
        u1?: string | number | undefined;
        u2?: string | number | undefined;
        underlinePosition?: string | number | undefined;
        underlineThickness?: string | number | undefined;
        unicode?: string | number | undefined;
        unicodeBidi?: string | number | undefined;
        unicodeRange?: string | number | undefined;
        unitsPerEm?: string | number | undefined;
        vAlphabetic?: string | number | undefined;
        values?: string | undefined;
        vectorEffect?: string | number | undefined;
        version?: string | undefined;
        vertAdvY?: string | number | undefined;
        vertOriginX?: string | number | undefined;
        vertOriginY?: string | number | undefined;
        vHanging?: string | number | undefined;
        vIdeographic?: string | number | undefined;
        viewBox?: string | undefined;
        viewTarget?: string | number | undefined;
        visibility?: string | number | undefined;
        vMathematical?: string | number | undefined;
        widths?: string | number | undefined;
        wordSpacing?: string | number | undefined;
        writingMode?: string | number | undefined;
        x1?: string | number | undefined;
        x2?: string | number | undefined;
        x?: string | number | undefined;
        xChannelSelector?: string | undefined;
        xHeight?: string | number | undefined;
        xlinkActuate?: string | undefined;
        xlinkArcrole?: string | undefined;
        xlinkHref?: string | undefined;
        xlinkRole?: string | undefined;
        xlinkShow?: string | undefined;
        xlinkTitle?: string | undefined;
        xlinkType?: string | undefined;
        xmlBase?: string | undefined;
        xmlLang?: string | undefined;
        xmlns?: string | undefined;
        xmlnsXlink?: string | undefined;
        xmlSpace?: string | undefined;
        y1?: string | number | undefined;
        y2?: string | number | undefined;
        y?: string | number | undefined;
        yChannelSelector?: string | undefined;
        z?: string | number | undefined;
        zoomAndPan?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-braillelabel'?: string | undefined;
        'aria-brailleroledescription'?: string | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colindextext'?: string | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-description'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowindextext'?: string | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
        onFocus?: import("react").FocusEventHandler<SVGTextElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<SVGTextElement> | undefined;
        onBlur?: import("react").FocusEventHandler<SVGTextElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<SVGTextElement> | undefined;
        onChange?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onInput?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onReset?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onSubmit?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onInvalid?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
        onLoad?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onError?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onKeyDown?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
        onKeyDownCapture?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
        onKeyPress?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
        onKeyPressCapture?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
        onKeyUp?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
        onKeyUpCapture?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
        onAbort?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onEnded?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onPause?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onPlay?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onProgress?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onResize?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onStalled?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onClick?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onDrag?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragExit?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragOver?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragStart?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDrop?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
        onSelect?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<SVGTextElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<SVGTextElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<SVGTextElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<SVGTextElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
        onScroll?: import("react").UIEventHandler<SVGTextElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<SVGTextElement> | undefined;
        onWheel?: import("react").WheelEventHandler<SVGTextElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<SVGTextElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
        ref?: import("react").LegacyRef<SVGTextElement> | undefined;
        key?: import("react").Key | null | undefined;
    }>;
};
